# frozen_string_literal: true

require 'faraday'
require 'faraday_middleware'

module ContainerRegistry
  class Client
    attr_accessor :uri

    MANIFEST_VERSION = 'application/vnd.docker.distribution.manifest.v2+json'.freeze

    # Taken from: FaradayMiddleware::FollowRedirects
    REDIRECT_CODES = Set.new [301, 302, 303, 307]

    def initialize(base_uri, options = {})
      @base_uri = base_uri
      @options = options
    end

    def repository_tags(name)
      response_body faraday.get("/v2/#{name}/tags/list")
    end

    def repository_manifest(name, reference)
      response_body faraday.get("/v2/#{name}/manifests/#{reference}")
    end

    def repository_tag_digest(name, reference)
      response = faraday.head("/v2/#{name}/manifests/#{reference}")
      response.headers['docker-content-digest'] if response.success?
    end

    def delete_repository_tag(name, reference)
      faraday.delete("/v2/#{name}/manifests/#{reference}").success?
    end

    def upload_blob(name, content, digest)
      upload = faraday.post("/v2/#{name}/blobs/uploads/") do |req|
      end

      location = URI(upload.headers['location'])

      upload = faraday.put("#{location.path}?#{location.query}") do |req|
        req.params['digest'] = digest
        req.headers['Content-Type'] = 'application/octect-stream'
        req.body = content
      end
    end

    def put_dummy_tag(name, reference)
      body = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xc9\x4f\xce\x4e\x2d" +
          "\x4a\xcb\xcc\x49\x65\xa0\x19\x30\x30\x34\x30\x30\x33\x31\x61\x30" +
          "\x80\x00\x74\xda\xc0\xc0\xc8\x9c\xc1\xd0\xd8\xd4\xd0\xc4\xc0\xc4" +
          "\xd8\xd0\xcc\x80\xc1\xc0\xd0\xd0\xc8\xd8\x98\x41\xc1\x80\x76\x4e" +
          "\x42\x80\xd2\xe2\x92\xc4\x22\x06\x03\x8a\xed\x42\xf7\xdc\x10\x01" +
          "\x6e\x41\xfe\xbe\x0a\xc5\xc9\x45\x89\x25\xc9\x19\x5c\x5c\xce\xfe" +
          "\x01\x91\x0a\x7a\x0a\xfa\x5c\x03\xed\xac\x51\x40\x27\x50\x92\x98" +
          "\x92\xa8\x57\x52\x51\x42\x4b\x3b\x08\xe6\x7f\x03\x53\x78\xfe\x37" +
          "\x02\x89\x1b\x1a\x98\x1b\x18\x8d\xe6\x7f\x7a\x00\x50\xfc\x8f\xe6" +
          "\xf6\x51\x30\x0a\x46\xc1\x28\x18\x79\x00\x10\x00\x00\xff\xff\x97" +
          "\x65\x7d\xe5\x00\x0c\x00\x00"

      upload_blob(name, body, "sha256:43cfe337dd5efe957da7866e65ea6f493953b346245dd1a73364ed62a97be68d")

      body = "\x7b\x22\x61\x72\x63\x68\x69\x74\x65\x63\x74\x75\x72\x65\x22\x3a" +
        "\x22\x61\x6d\x64\x36\x34\x22\x2c\x22\x63\x6f\x6e\x66\x69\x67\x22" +
        "\x3a\x7b\x22\x48\x6f\x73\x74\x6e\x61\x6d\x65\x22\x3a\x22\x22\x2c" +
        "\x22\x44\x6f\x6d\x61\x69\x6e\x6e\x61\x6d\x65\x22\x3a\x22\x22\x2c" +
        "\x22\x55\x73\x65\x72\x22\x3a\x22\x22\x2c\x22\x41\x74\x74\x61\x63" +
        "\x68\x53\x74\x64\x69\x6e\x22\x3a\x66\x61\x6c\x73\x65\x2c\x22\x41" +
        "\x74\x74\x61\x63\x68\x53\x74\x64\x6f\x75\x74\x22\x3a\x66\x61\x6c" +
        "\x73\x65\x2c\x22\x41\x74\x74\x61\x63\x68\x53\x74\x64\x65\x72\x72" +
        "\x22\x3a\x66\x61\x6c\x73\x65\x2c\x22\x54\x74\x79\x22\x3a\x66\x61" +
        "\x6c\x73\x65\x2c\x22\x4f\x70\x65\x6e\x53\x74\x64\x69\x6e\x22\x3a" +
        "\x66\x61\x6c\x73\x65\x2c\x22\x53\x74\x64\x69\x6e\x4f\x6e\x63\x65" +
        "\x22\x3a\x66\x61\x6c\x73\x65\x2c\x22\x45\x6e\x76\x22\x3a\x5b\x22" +
        "\x50\x41\x54\x48\x3d\x2f\x75\x73\x72\x2f\x6c\x6f\x63\x61\x6c\x2f" +
        "\x73\x62\x69\x6e\x3a\x2f\x75\x73\x72\x2f\x6c\x6f\x63\x61\x6c\x2f" +
        "\x62\x69\x6e\x3a\x2f\x75\x73\x72\x2f\x73\x62\x69\x6e\x3a\x2f\x75" +
        "\x73\x72\x2f\x62\x69\x6e\x3a\x2f\x73\x62\x69\x6e\x3a\x2f\x62\x69" +
        "\x6e\x22\x5d\x2c\x22\x43\x6d\x64\x22\x3a\x6e\x75\x6c\x6c\x2c\x22" +
        "\x49\x6d\x61\x67\x65\x22\x3a\x22\x22\x2c\x22\x56\x6f\x6c\x75\x6d" +
        "\x65\x73\x22\x3a\x6e\x75\x6c\x6c\x2c\x22\x57\x6f\x72\x6b\x69\x6e" +
        "\x67\x44\x69\x72\x22\x3a\x22\x22\x2c\x22\x45\x6e\x74\x72\x79\x70" +
        "\x6f\x69\x6e\x74\x22\x3a\x6e\x75\x6c\x6c\x2c\x22\x4f\x6e\x42\x75" +
        "\x69\x6c\x64\x22\x3a\x6e\x75\x6c\x6c\x2c\x22\x4c\x61\x62\x65\x6c" +
        "\x73\x22\x3a\x6e\x75\x6c\x6c\x7d\x2c\x22\x63\x6f\x6e\x74\x61\x69" +
        "\x6e\x65\x72\x5f\x63\x6f\x6e\x66\x69\x67\x22\x3a\x7b\x22\x48\x6f" +
        "\x73\x74\x6e\x61\x6d\x65\x22\x3a\x22\x22\x2c\x22\x44\x6f\x6d\x61" +
        "\x69\x6e\x6e\x61\x6d\x65\x22\x3a\x22\x22\x2c\x22\x55\x73\x65\x72" +
        "\x22\x3a\x22\x22\x2c\x22\x41\x74\x74\x61\x63\x68\x53\x74\x64\x69" +
        "\x6e\x22\x3a\x66\x61\x6c\x73\x65\x2c\x22\x41\x74\x74\x61\x63\x68" +
        "\x53\x74\x64\x6f\x75\x74\x22\x3a\x66\x61\x6c\x73\x65\x2c\x22\x41" +
        "\x74\x74\x61\x63\x68\x53\x74\x64\x65\x72\x72\x22\x3a\x66\x61\x6c" +
        "\x73\x65\x2c\x22\x54\x74\x79\x22\x3a\x66\x61\x6c\x73\x65\x2c\x22" +
        "\x4f\x70\x65\x6e\x53\x74\x64\x69\x6e\x22\x3a\x66\x61\x6c\x73\x65" +
        "\x2c\x22\x53\x74\x64\x69\x6e\x4f\x6e\x63\x65\x22\x3a\x66\x61\x6c" +
        "\x73\x65\x2c\x22\x45\x6e\x76\x22\x3a\x5b\x22\x50\x41\x54\x48\x3d" +
        "\x2f\x75\x73\x72\x2f\x6c\x6f\x63\x61\x6c\x2f\x73\x62\x69\x6e\x3a" +
        "\x2f\x75\x73\x72\x2f\x6c\x6f\x63\x61\x6c\x2f\x62\x69\x6e\x3a\x2f" +
        "\x75\x73\x72\x2f\x73\x62\x69\x6e\x3a\x2f\x75\x73\x72\x2f\x62\x69" +
        "\x6e\x3a\x2f\x73\x62\x69\x6e\x3a\x2f\x62\x69\x6e\x22\x5d\x2c\x22" +
        "\x43\x6d\x64\x22\x3a\x5b\x22\x2f\x62\x69\x6e\x2f\x73\x68\x22\x2c" +
        "\x22\x2d\x63\x22\x2c\x22\x23\x28\x6e\x6f\x70\x29\x20\x43\x4f\x50" +
        "\x59\x20\x64\x69\x72\x3a\x38\x65\x66\x30\x30\x65\x39\x66\x39\x32" +
        "\x38\x61\x66\x34\x38\x34\x62\x30\x32\x61\x64\x61\x34\x33\x31\x38" +
        "\x37\x62\x63\x63\x65\x61\x32\x61\x31\x64\x30\x65\x33\x39\x36\x33" +
        "\x65\x33\x33\x65\x30\x34\x37\x63\x64\x61\x32\x37\x63\x35\x34\x66" +
        "\x32\x37\x33\x62\x32\x38\x20\x69\x6e\x20\x2f\x20\x22\x5d\x2c\x22" +
        "\x49\x6d\x61\x67\x65\x22\x3a\x22\x22\x2c\x22\x56\x6f\x6c\x75\x6d" +
        "\x65\x73\x22\x3a\x6e\x75\x6c\x6c\x2c\x22\x57\x6f\x72\x6b\x69\x6e" +
        "\x67\x44\x69\x72\x22\x3a\x22\x22\x2c\x22\x45\x6e\x74\x72\x79\x70" +
        "\x6f\x69\x6e\x74\x22\x3a\x6e\x75\x6c\x6c\x2c\x22\x4f\x6e\x42\x75" +
        "\x69\x6c\x64\x22\x3a\x6e\x75\x6c\x6c\x2c\x22\x4c\x61\x62\x65\x6c" +
        "\x73\x22\x3a\x6e\x75\x6c\x6c\x7d\x2c\x22\x63\x72\x65\x61\x74\x65" +
        "\x64\x22\x3a\x22\x32\x30\x31\x39\x2d\x30\x37\x2d\x31\x38\x54\x31" +
        "\x30\x3a\x31\x35\x3a\x30\x33\x2e\x31\x39\x33\x30\x30\x38\x36\x5a" +
        "\x22\x2c\x22\x64\x6f\x63\x6b\x65\x72\x5f\x76\x65\x72\x73\x69\x6f" +
        "\x6e\x22\x3a\x22\x31\x38\x2e\x30\x39\x2e\x32\x22\x2c\x22\x68\x69" +
        "\x73\x74\x6f\x72\x79\x22\x3a\x5b\x7b\x22\x63\x72\x65\x61\x74\x65" +
        "\x64\x22\x3a\x22\x32\x30\x31\x39\x2d\x30\x37\x2d\x31\x38\x54\x31" +
        "\x30\x3a\x31\x35\x3a\x30\x33\x2e\x31\x39\x33\x30\x30\x38\x36\x5a" +
        "\x22\x2c\x22\x63\x72\x65\x61\x74\x65\x64\x5f\x62\x79\x22\x3a\x22" +
        "\x2f\x62\x69\x6e\x2f\x73\x68\x20\x2d\x63\x20\x23\x28\x6e\x6f\x70" +
        "\x29\x20\x43\x4f\x50\x59\x20\x64\x69\x72\x3a\x38\x65\x66\x30\x30" +
        "\x65\x39\x66\x39\x32\x38\x61\x66\x34\x38\x34\x62\x30\x32\x61\x64" +
        "\x61\x34\x33\x31\x38\x37\x62\x63\x63\x65\x61\x32\x61\x31\x64\x30" +
        "\x65\x33\x39\x36\x33\x65\x33\x33\x65\x30\x34\x37\x63\x64\x61\x32" +
        "\x37\x63\x35\x34\x66\x32\x37\x33\x62\x32\x38\x20\x69\x6e\x20\x2f" +
        "\x20\x22\x7d\x5d\x2c\x22\x6f\x73\x22\x3a\x22\x6c\x69\x6e\x75\x78" +
        "\x22\x2c\x22\x72\x6f\x6f\x74\x66\x73\x22\x3a\x7b\x22\x74\x79\x70" +
        "\x65\x22\x3a\x22\x6c\x61\x79\x65\x72\x73\x22\x2c\x22\x64\x69\x66" +
        "\x66\x5f\x69\x64\x73\x22\x3a\x5b\x22\x73\x68\x61\x32\x35\x36\x3a" +
        "\x61\x31\x66\x63\x32\x38\x36\x65\x30\x39\x65\x62\x35\x31\x38\x66" +
        "\x39\x64\x33\x65\x33\x63\x66\x63\x33\x34\x61\x36\x65\x61\x65\x66" +
        "\x64\x36\x35\x36\x64\x32\x62\x33\x34\x63\x66\x62\x36\x34\x62\x30" +
        "\x31\x61\x64\x30\x30\x63\x39\x32\x61\x64\x31\x65\x37\x37\x30\x37" +
        "\x22\x5d\x7d\x7d"

      upload_blob(name, body, "sha256:74d19a08f9234448c84e2016cce183d4f5c3fed1dba9eaeebf06c5c4abb3ddab")

      faraday.put("/v2/#{name}/manifests/#{reference}") do |req|
        req.headers['Content-Type'] = 'application/vnd.docker.distribution.manifest.v2+json'
        req.body = <<~DIGEST
        {
          "schemaVersion": 2,
          "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
          "config": {
              "mediaType": "application/vnd.docker.container.image.v1+json",
              "size": 1172,
              "digest": "sha256:74d19a08f9234448c84e2016cce183d4f5c3fed1dba9eaeebf06c5c4abb3ddab"
          },
          "layers": [
              {
                "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
                "size": 167,
                "digest": "sha256:43cfe337dd5efe957da7866e65ea6f493953b346245dd1a73364ed62a97be68d"
              }
          ]
        }
        DIGEST
      end
    end

    def blob(name, digest, type = nil)
      type ||= 'application/octet-stream'
      response_body faraday_blob.get("/v2/#{name}/blobs/#{digest}", nil, 'Accept' => type), allow_redirect: true
    end

    def delete_blob(name, digest)
      faraday.delete("/v2/#{name}/blobs/#{digest}").success?
    end

    private

    class MyEncoder
      def self.encode(params)
        Faraday::FlatParamsEncoder.encode(params).gsub("%3A", ":")
      end

      def self.decode(query)
        Faraday::FlatParamsEncoder.decode(query)
      end
    end

    def initialize_connection(conn, options)
      conn.request :json

      if options[:user] && options[:password]
        conn.request(:basic_auth, options[:user].to_s, options[:password].to_s)
      elsif options[:token]
        conn.request(:authorization, :bearer, options[:token].to_s)
      end

      conn.options.params_encoder = MyEncoder

      yield(conn) if block_given?

      conn.adapter :net_http
    end

    def accept_manifest(conn)
      conn.headers['Accept'] = MANIFEST_VERSION

      conn.response :json, content_type: 'application/json'
      conn.response :json, content_type: 'application/vnd.docker.distribution.manifest.v1+prettyjws'
      conn.response :json, content_type: 'application/vnd.docker.distribution.manifest.v1+json'
      conn.response :json, content_type: 'application/vnd.docker.distribution.manifest.v2+json'
    end

    def response_body(response, allow_redirect: false)
      if allow_redirect && REDIRECT_CODES.include?(response.status)
        response = redirect_response(response.headers['location'])
      end

      response.body if response && response.success?
    end

    def redirect_response(location)
      return unless location

      faraday_redirect.get(location)
    end

    def faraday
      @faraday ||= Faraday.new(@base_uri) do |conn|
        initialize_connection(conn, @options, &method(:accept_manifest))
      end
    end

    def faraday_blob
      @faraday_blob ||= Faraday.new(@base_uri) do |conn|
        initialize_connection(conn, @options)
      end
    end

    # Create a new request to make sure the Authorization header is not inserted
    # via the Faraday middleware
    def faraday_redirect
      @faraday_redirect ||= Faraday.new(@base_uri) do |conn|
        conn.request :json
        conn.adapter :net_http
      end
    end
  end
end
